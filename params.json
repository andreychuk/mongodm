{"name":"Mongodm","tagline":"MongoDB ORM that includes support for references and multilevel inheritance.","body":"Mongodm  \r\n======= \r\n[![Build Status](https://secure.travis-ci.org/purekid/mongodm.png?branch=master)](http://travis-ci.org/purekid/mongodm)\r\n\r\na PHP MongoDB ORM ,  simple and flexible\r\n\r\nRequirements\r\n------------\r\n- PHP 5.3 or greater\r\n- Mongodb 1.3 or greater\r\n- PHP Mongo extension \r\n\r\nFeatures\r\n--------\r\n\r\n- ORM\r\n- Simple and flexible\r\n- Support for references (lazy loaded)\r\n- Support for multilevel inheritance\r\n\r\nInstallation\r\n----------\r\n\r\n### 1. Setup in composer.json: \r\n \r\n\t{\r\n\t\t\"require\": {\r\n\t\t    \"purekid/mongodm\": \"dev-master\"\r\n\t\t}\r\n\t}\r\n\r\n\r\n### 2. Install by composer:\r\n\r\n\tphp composer.phar install\r\n\r\n\r\nUsage\r\n----------\r\n\r\n### Setup database in   config/database.php\r\nIf you want select config section with environment variable APPLICATION_ENV , you should set $config='default' or don't declare $config in your own model class.\r\n\r\n\treturn array(\r\n        'default' => array(\r\n    \t\t'connection' => array(\r\n    \t\t\t'hostnames' => 'localhost',\r\n    \t\t\t'database'  => 'default',\r\n    // \t\t\t'username'  => '',\r\n    // \t\t\t'password'  => '',\r\n    \t\t)\r\n    \t),\r\n    \t'development' => array(\r\n    \t\t'connection' => array(\r\n    \t\t\t'hostnames' => 'localhost',\r\n    \t\t\t'database'  => 'development'\r\n    \t\t)\r\n    \t),\r\n    \t'testing' => array(\r\n    \t\t'connection' => array(\r\n    \t\t\t'hostnames' => 'localhost',\r\n    \t\t\t'database'  => 'test'\r\n    \t\t)\r\n    \t),\r\n    \t'production' => array(\r\n    \t\t'connection' => array(\r\n    \t\t\t'hostnames' => 'localhost',\r\n    \t\t\t'database'  => 'production'\r\n    \t\t)\r\n    \t)\r\n    );\r\n\r\n### Define a model and enjoy it\r\n\r\n    use Purekid\\Mongodm\\Model;\r\n        \r\n    class User extends Model \r\n    {\r\n    \r\n        static $collection = \"user\";\r\n        \r\n        /** use specific config section **/\r\n        public static $config = 'testing';\r\n        \r\n        /** specific definition for attributes, not necessary! **/\r\n        protected static $attrs = array(\r\n                \r\n             // 1 to 1 reference\r\n            'book_fav' => array('model'=>'Purekid\\Mongodm\\Test\\Model\\Book','type'=>'reference'),\r\n             // 1 to many references\r\n            'books' => array('model'=>'Purekid\\Mongodm\\Test\\Model\\Book','type'=>'references'),\r\n            // you can define default value for attribute\r\n            'age' => array('default'=>16,'type'=>'integer'),\r\n            'money' => array('default'=>20.0,'type'=>'double'),\r\n            'hobbies' => array('default'=>array('love'),'type'=>'array'),\r\n            'born_time' => array('type'=>'timestamp'),\r\n            'family'=>array('type'=>'object')\r\n                \r\n        );\r\n    \r\n    }\r\n    \r\nTypes Supported for model attr\r\n----------   \r\n\r\n\t$types = [\r\n\t    'mixed',  // mixed type \r\n\t    'string',     \r\n\t    'reference',  // a reference to another model\r\n\t    'references', // references to another model\r\n\t    'integer',  \r\n\t    'int',  // alias of 'integer'\r\n\t    'double',     // float \r\n\t    'timestamp',  // store as MongoTimestamp in Mongodb\r\n\t    'boolean',    // true or false\r\n\t    'array',    \r\n\t    'object'\r\n\t]\r\n\r\nCRUD\r\n---------- \r\n\r\n### Create \r\n\t$user = new User();\r\n\t$user->name = \"Michael\";\r\n\t$user->age = 18;\r\n\t$user->save();\r\n    \r\nCreate with initial value\r\n\r\n\t$user = new User( array('name'=>\"John\") );\r\n\t$user->age = 20;\r\n\t$user->save();\r\n\r\n### Update\r\n\t$user->age = 19;\r\n\r\nUpdate attrs by array\r\n\r\n\t$user->update( array('age'=>18,'hobbies'=>array('music','game') ) ); \r\n\t$user->save();\r\n\r\n### Retrieve single record\r\n\r\n\t$user = User::one( array('name'=>\"michael\" ) );\r\n\t\r\nretrieve one record by MongoId\r\n\r\n\t$id = \"517c850641da6da0ab000004\";\r\n\r\n\t$id = new \\MongoId('517c850641da6da0ab000004'); //another way\r\n\t$user = User::id( $id );\r\n\t\r\n### Retrieve records\r\n\r\nRetrieve records that name is 'Michael' and acount  of owned  books equals 2\r\n\r\n\t$params = array( 'name'=>'Michael','books'=>array('$size'=>2) );\r\n\t$users = User::find($params);     // $users is instance of Collection\r\n\techo $users->count();\r\n       \r\n### Retrieve all records\r\n\t$users = User::all();\r\n\t\r\n### Count records\r\n\t$count = User::count(array('age'=>16));\r\n\r\n### Delete record\r\n\t$user = User::one();\r\n\t$user->delete();\t\r\n\t\r\n\r\nRelationship\r\n---------- \r\n### Lazyload a 1:1 relationship record\r\n\r\n\t$book = new Book();\r\n\t$book->name = \"My Love\";\r\n\t$book->price = 15;\r\n\t$book->save();\r\n\r\n\t// !!!remember you must save book before!!!\r\n\t$user->book_fav = $book;\r\n\t$user->save();\r\n\r\n\t// now you can do this\r\n\t$user = User::one( array('name'=>\"michael\" ) );\r\n\techo $user->book_fav->name;\r\n\r\n### Lazyload 1:many relationship records\r\n\r\n\t$user = User::one();\r\n\r\n\t$book1 = new Book();\r\n\t$book1->name = \"book1\";\r\n\t$book1->save();\r\n\t\r\n\t$book2 = new Book();\r\n\t$book2->name = \"book2\";\r\n\t$book2->save();\r\n\r\n\t$user->books = array($book1,$book2);\r\n\t//also you can\r\n\t$user->books = Collection::make(array($book1,$book2));\r\n\t$user->save();\r\n\r\n\t//somewhere , load these books\r\n\t$user = User::id($id);\r\n\t$books = $user->books;      // $books is a instance of Collection\r\n\r\n###  Collection \r\n\r\n$users is instance of Collection\r\n\r\n\t$users = User::find(  array( 'name'=>'Michael','books'=>array('$size'=>2) ) );    \r\n\t$users_other = User::find(  array( 'name'=>'John','books'=>array('$size'=>2) ) );   \r\n\t\r\nCount \r\n\r\n\t$users->count();  \r\n\t$users->isEmpty();\r\n\t\r\nIteration\t\r\n\r\n\tforeach($users as $user) { }  \r\n\t\r\n\t// OR use Closure \r\n\t\r\n\t$users->each(function($user){\r\n\t\r\n\t})\r\n\t\r\nSort\r\n\r\n\t//sort by age desc\r\n\t$users->sortBy(function($user){\r\n\t    return $user->age;\r\n\t});\r\n\t\r\n\t//sort by name asc\r\n\t$users->sortBy(function($user){\r\n\t    return $user->name;\r\n\t} , true);\r\n\t\r\n\t//reverse collection items\r\n\t$users->reverse();\r\n\r\nSlice and Take\r\n\t\r\n\t$users->slice(0,1);\r\n\t$users->take(2);\r\n\t\r\nMap\r\n\t\r\n\t$func = function($user){\r\n\t\t  \t\tif( $user->age >= 18 ){\r\n\t\t    \t\t$user->is_adult = true;\r\n\t\t    \t\treturn $user;\r\n\t        \t}\r\n\t\t\t};\r\n\t\r\n\t$adults = $users->map($func);   \r\n\t\r\n\t// Notice:  1. $adults is a new collection   2. In original $users , data has changed at the same time. \r\n\t\r\nFilter \r\n\r\n\t$func = function($user){\r\n\t        \tif( $user->age >= 18 ){\r\n\t    \t\t\treturn true;\r\n\t    \t\t}\r\n\t\t\t}\r\n\r\n\t$adults = $users->filter($func); // $adults is a new collection\r\n\r\nDetermine a record exists in the collection by object instance\t\r\n\t\r\n\t$john = User::one(array(\"name\"=>\"John\"));\r\n\t\r\n\t$users->has($john) \r\n\r\nDetermine a record exists in the collection by numeric index\t\r\n\r\n\t$users->has(0) \r\n\t\r\nDetermine a record exists in the collection by MongoID\t\r\n\r\n\t$users->has('518c6a242d12d3db0c000007') \r\n\r\nGet a record by numeric index\r\n\r\n\t$users->get(0) \r\n\r\nGet a record by MongoID \r\n\r\n\t$users->get('518c6a242d12d3db0c000007') \r\n\r\nRemove a record by numeric index\r\n\r\n\t$users->remove(0)  \r\n\r\nRemove a record  by MongoID\r\n\r\n\t$users->remove('518c6a242d12d3db0c000007') \r\n\t\r\nAdd a single record to collection\r\n\r\n\t$bob = new User( array(\"name\"=>\"Bob\"));\r\n\t$bob->save();\r\n\t$users->add($bob);\r\n\t\r\nAdd records to collection\r\n\t\r\n\t$bob = new User( array(\"name\"=>\"Bob\"));\r\n\t$bob->save();\r\n\t$lisa = new User( array(\"name\"=>\"Lisa\"));\r\n\t$lisa->save();\r\n\t\r\n\t$users->add( array($bob,$lisa) ); \r\n\t\r\nMerge two collection \r\n\t\r\n\t$users->add($users_other);  // the collection $users_other appends to end of $users \r\n\t\r\nExport data to a array\r\n\r\n\t$users->toArray();\r\n\t\r\nInheritance\r\n----------\r\n\t\r\n### Define multilevel inheritable models:\r\n\r\n\tuse Purekid\\Mongodm\\Model;\r\n\tnamespace Demo;\r\n\t\r\n\tclass Human extends Model{\r\n\t\r\n\t\tstatic $collection = \"human\";\r\n\t\t\r\n\t\tprotected static $attrs = array(\r\n\t\t\t'name' => array('default'=>'anonym','type'=>'string'),\r\n\t\t\t'age' => array('type'=>'integer'),\r\n\t\t\t'gender' => array('type'=>'string'),\r\n\t\t\t'dad' =>  array('type'=>'reference','model'=>'Demo\\Human'),\r\n\t\t\t'mum' =>  array('type'=>'reference','model'=>'Demo\\Human'),\r\n\t\t\t'friends' => array('type'=>'references','model'=>'Demo\\Human'),\r\n\t\t)\r\n\t\r\n\t}\r\n\r\n\tclass Student extends Human{\r\n\t\r\n\t\tprotected static $attrs = array(\r\n\t\t\t'grade' => array('type'=>'string'),\r\n\t\t\t'classmates' => array('type'=>'references','model'=>'Demo\\Student'),\r\n\t\t)\r\n\t\t\r\n\t}\r\n\t\r\n### Use:\r\n\r\n\t$bob = new Student( array('name'=>'Bob','age'=> 17 ,'gender'=>'male' ) );\r\n\t$bob->save();\r\n\t\r\n\t$john = new Student( array('name'=>'John','age'=> 16 ,'gender'=>'male' ) );\r\n\t$john->save();\r\n\t\r\n\t$lily = new Student( array('name'=>'Lily','age'=> 16 ,'gender'=>'female' ) );\r\n\t$lily->save();\r\n\t\r\n\t$lisa = new Human( array('name'=>'Lisa','age'=>41 ,'gender'=>'female' ) );\r\n\t$lisa->save();\r\n\t\r\n\t$david = new Human( array('name'=>'David','age'=>42 ,'gender'=>'male') );\r\n\t$david->save();\r\n\t\r\n\t$bob->dad = $david;\r\n\t$bob->mum = $lisa;\r\n\t$bob->classmates = array( $john, $lily );\r\n\t$bob->save();\r\n\t\r\n### Retrieve and check value:\r\n\r\n\t$bob = Student::one( array(\"name\"=>\"Bob\") );\r\n\t\r\n\techo $bob->dad->name;    // David\r\n\t\r\n\t$classmates = $bob->classmates;\r\n\t\r\n\techo $classmates->count(); // 2\r\n    \r\n\tvar_dump($classmates->get(0)); // john\t\r\n\t\r\n\r\n### Retrieve subclass\r\n\r\nRetrieve all Human records , queries without '_type' because of it's a toplevel class.\r\n\t\r\n    $humans = Human::all();\r\n    \r\nRetrieve all Student records , queries with  { \"_type\":\"Student\" } because of it's a subclass.\r\n\r\n    $students = Student::all();\r\n\r\n\r\n### Other static methods \r\n\r\nDrop the collection in database\r\n\r\n##### drop()\r\n\r\n### Hooks\r\n\r\nThe following hooks are available:\r\n\r\n##### __init()\r\n\r\nExecuted after the constructor has finished\r\n\r\n##### __preInsert()\r\n\r\nExecuted before saving a new record\r\n\r\n##### __postInsert()\r\n\r\nExecuted after saving a new record\r\n\r\n##### __preUpdate()\r\n\r\nExecuted before saving an existing record\r\n\r\n##### __postUpdate()\r\n\r\nExecuted after saving an existing record\r\n\r\n##### __preSave()\r\n\r\nExecuted before saving a record\r\n\r\n##### __postSave()\r\n\r\nExecuted after saving a record\r\n\r\n##### __preDelete()\r\n\r\nExecuted before deleting a record\r\n\r\n##### __postDelete()\r\n\r\nExecuted after deleting a record\r\n\r\nSpecial thanks to\r\n-----------------\r\n\r\n[mikelbring](https://github.com/mikelbring)\r\n[Paul Hrimiuc](https://github.com/hpaul/)\r\n\r\n\r\n\t\r\n\t\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}